package idw.model.pojos.agramkow;

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import idw.model.pojos.agramkow.template.LineTemplate;
import idw.model.pojos.template.DwConsolalTemplate;

/**
 * Line generated by hbm2java
 */
@Entity
@Table(name = "LINE")
public class Line extends LineTemplate implements java.io.Serializable {

	private LineId id;
	private Servers servers;
	
	private String descriptor;
	private String description;
	private String note;
	private String createdBy;
	private Date createdDate;
	private String changedBy;
	private Date changedDate;
	private Byte deleted;
	
	private Set<ResultsHeader> resultsHeaders = new HashSet<ResultsHeader>(0);

	public Line() {
	}

	public Line(LineId id, Servers servers, 
			String descriptor, Date createdDate, Date changedDate,
			Byte deleted) {
		this.id = id;
		this.servers = servers;
		
		this.descriptor = descriptor;
		this.createdDate = createdDate;
		this.changedDate = changedDate;
		this.deleted = deleted;
	}

	public Line(LineId id, Servers servers, 
			String descriptor, String description,
			String note, String createdBy, Date createdDate,
			String changedBy, Date changedDate, Byte deleted,
			
			Set<ResultsHeader> resultsHeaders) {
		this.id = id;
		this.servers = servers;
		
		this.descriptor = descriptor;
		this.description = description;
		this.note = note;
		this.createdBy = createdBy;
		this.createdDate = createdDate;
		this.changedBy = changedBy;
		this.changedDate = changedDate;
		this.deleted = deleted;
		
		this.resultsHeaders = resultsHeaders;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "lineId", column = @Column(name = "LINE_ID", nullable = false)),
			@AttributeOverride(name = "server", column = @Column(name = "SERVER", nullable = false)) })
	public LineId getId() {
		return this.id;
	}

	public void setId(LineId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "SERVER", nullable = false, insertable = false, updatable = false)
	public Servers getServers() {
		return this.servers;
	}

	public void setServers(Servers servers) {
		this.servers = servers;
	}


	@Column(name = "DESCRIPTOR", nullable = false)
	public String getDescriptor() {
		return this.descriptor;
	}

	public void setDescriptor(String descriptor) {
		this.descriptor = descriptor;
	}

	@Column(name = "DESCRIPTION")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "NOTE")
	public String getNote() {
		return this.note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	@Column(name = "CREATED_BY")
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATED_DATE", nullable = false, length = 23)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Column(name = "CHANGED_BY")
	public String getChangedBy() {
		return this.changedBy;
	}

	public void setChangedBy(String changedBy) {
		this.changedBy = changedBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CHANGED_DATE", nullable = false, length = 23)
	public Date getChangedDate() {
		return this.changedDate;
	}

	public void setChangedDate(Date changedDate) {
		this.changedDate = changedDate;
	}

	@Column(name = "DELETED", nullable = false)
	public Byte getDeleted() {
		return this.deleted;
	}

	public void setDeleted(Byte deleted) {
		this.deleted = deleted;
	}


	@OneToMany(fetch = FetchType.LAZY, mappedBy = "line")
	public Set<ResultsHeader> getResultsHeaders() {
		return this.resultsHeaders;
	}

	public void setResultsHeaders(Set<ResultsHeader> resultsHeaders) {
		this.resultsHeaders = resultsHeaders;
	}

}
