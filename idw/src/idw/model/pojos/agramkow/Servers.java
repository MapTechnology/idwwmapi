package idw.model.pojos.agramkow;

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Servers generated by hbm2java
 */
@Entity
@Table(name = "SERVERS")
public class Servers implements java.io.Serializable {

	private Byte serverId;
	//private Factory factory;
	private String name;
	private String note;
	private String hostIp;
	private String hostName;
	private String dbName;
	private Date lastRun;
	private String config;
	private Byte running;
	private Date lastRefresh;
	private Set<Areas> areases = new HashSet<Areas>(0);
	private Set<ResultsHeader> resultsHeaders = new HashSet<ResultsHeader>(0);
	private Set<Line> lines = new HashSet<Line>(0);
	//private Set<Products> productses = new HashSet<Products>(0);
	//private Set<LimitType> limitTypes = new HashSet<LimitType>(0);
	private Set<Failcodes> failcodeses = new HashSet<Failcodes>(0);
	private Set<Models> modelses = new HashSet<Models>(0);
	//private Set<EventHeader> eventHeaders = new HashSet<EventHeader>(0);
	//private Set<Workshifts> workshiftses = new HashSet<Workshifts>(0);
	//private Set<LimitsHeader> limitsHeaders = new HashSet<LimitsHeader>(0);
	private Set<Units> unitses = new HashSet<Units>(0);

	public Servers() {
	}

	/*
	public Servers(Byte serverId, Factory factory, String hostIp,
			String hostName, String dbName, Date lastRun,
			String config, Byte running) {
		this.serverId = serverId;
		this.factory = factory;
		this.hostIp = hostIp;
		this.hostName = hostName;
		this.dbName = dbName;
		this.lastRun = lastRun;
		this.config = config;
		this.running = running;
	}*/

	
	public Servers(Byte serverId, String hostIp,
			String hostName, String dbName, Date lastRun,
			String config, Byte running) {
		this.serverId = serverId;
		this.hostIp = hostIp;
		this.hostName = hostName;
		this.dbName = dbName;
		this.lastRun = lastRun;
		this.config = config;
		this.running = running;
	}
	
	/*
	public Servers(Byte serverId, Factory factory, String name,
			String note, String hostIp, String hostName,
			String dbName, Date lastRun, String config,
			Byte running, Date lastRefresh, Set<Areas> areases,
			Set<ResultsHeader> resultsHeaders, Set<Line> lines,
			Set<Products> productses, Set<LimitType> limitTypes,
			Set<Failcodes> failcodeses, Set<Models> modelses,
			Set<EventHeader> eventHeaders, Set<Workshifts> workshiftses,
			Set<LimitsHeader> limitsHeaders, Set<Units> unitses) {
		this.serverId = serverId;
		this.factory = factory;
		this.name = name;
		this.note = note;
		this.hostIp = hostIp;
		this.hostName = hostName;
		this.dbName = dbName;
		this.lastRun = lastRun;
		this.config = config;
		this.running = running;
		this.lastRefresh = lastRefresh;
		this.areases = areases;
		this.resultsHeaders = resultsHeaders;
		this.lines = lines;
		this.productses = productses;
		this.limitTypes = limitTypes;
		this.failcodeses = failcodeses;
		this.modelses = modelses;
		this.eventHeaders = eventHeaders;
		this.workshiftses = workshiftses;
		this.limitsHeaders = limitsHeaders;
		this.unitses = unitses;
	}*/
	

	public Servers(Byte serverId,  String name,
			String note, String hostIp, String hostName,
			String dbName, Date lastRun, String config,
			Byte running, Date lastRefresh, Set<Areas> areases,
			Set<ResultsHeader> resultsHeaders, Set<Line> lines,
			 
			Set<Failcodes> failcodeses, Set<Models> modelses,
			
			Set<Units> unitses) {
		this.serverId = serverId;
		
		this.name = name;
		this.note = note;
		this.hostIp = hostIp;
		this.hostName = hostName;
		this.dbName = dbName;
		this.lastRun = lastRun;
		this.config = config;
		this.running = running;
		this.lastRefresh = lastRefresh;
		this.areases = areases;
		this.resultsHeaders = resultsHeaders;
		this.lines = lines;
		
		this.failcodeses = failcodeses;
		this.modelses = modelses;
		
		this.unitses = unitses;
	}	

	@Id
	@Column(name = "SERVER_ID", unique = true, nullable = false)
	public Byte getServerId() {
		return this.serverId;
	}

	public void setServerId(Byte serverId) {
		this.serverId = serverId;
	}


	@Column(name = "NAME")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "NOTE")
	public String getNote() {
		return this.note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	@Column(name = "HOST_IP", nullable = false)
	public String getHostIp() {
		return this.hostIp;
	}

	public void setHostIp(String hostIp) {
		this.hostIp = hostIp;
	}

	@Column(name = "HOST_NAME", nullable = false)
	public String getHostName() {
		return this.hostName;
	}

	public void setHostName(String hostName) {
		this.hostName = hostName;
	}

	@Column(name = "DB_NAME", nullable = false)
	public String getDbName() {
		return this.dbName;
	}

	public void setDbName(String dbName) {
		this.dbName = dbName;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LAST_RUN", nullable = false, length = 23)
	public Date getLastRun() {
		return this.lastRun;
	}

	public void setLastRun(Date lastRun) {
		this.lastRun = lastRun;
	}

	@Column(name = "CONFIG", nullable = false)
	public String getConfig() {
		return this.config;
	}

	public void setConfig(String config) {
		this.config = config;
	}

	@Column(name = "RUNNING", nullable = false)
	public Byte getRunning() {
		return this.running;
	}

	public void setRunning(Byte running) {
		this.running = running;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LAST_REFRESH", length = 23)
	public Date getLastRefresh() {
		return this.lastRefresh;
	}

	public void setLastRefresh(Date lastRefresh) {
		this.lastRefresh = lastRefresh;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servers")
	public Set<Areas> getAreases() {
		return this.areases;
	}

	public void setAreases(Set<Areas> areases) {
		this.areases = areases;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servers")
	public Set<ResultsHeader> getResultsHeaders() {
		return this.resultsHeaders;
	}

	public void setResultsHeaders(Set<ResultsHeader> resultsHeaders) {
		this.resultsHeaders = resultsHeaders;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servers")
	public Set<Line> getLines() {
		return this.lines;
	}

	public void setLines(Set<Line> lines) {
		this.lines = lines;
	}


	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servers")
	public Set<Failcodes> getFailcodeses() {
		return this.failcodeses;
	}

	public void setFailcodeses(Set<Failcodes> failcodeses) {
		this.failcodeses = failcodeses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servers")
	public Set<Models> getModelses() {
		return this.modelses;
	}

	public void setModelses(Set<Models> modelses) {
		this.modelses = modelses;
	}


	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servers")
	public Set<Units> getUnitses() {
		return this.unitses;
	}

	public void setUnitses(Set<Units> unitses) {
		this.unitses = unitses;
	}

}
